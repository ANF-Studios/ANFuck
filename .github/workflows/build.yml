name: Windows MSBuild

on: [push, pull_request]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release
  
  # Architecture of the build
  BUILD_ARCHITECTURE: "Any CPU"

jobs:
  build_windows:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1

    #- name: Restore NuGet packages
    #  working-directory: ${{env.GITHUB_WORKSPACE}}
    #  run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild #/m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Platform=${{env.BUILD_ARCHITECTURE}} ${{env.SOLUTION_FILE_PATH}}

  build_linux:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Build
        working-directory: "/home/runner/work/ANFuck/ANFuck/"
        run: |
          cd ANFuck
          mkdir ./__dist
          g++ src/main.cpp -o __dist/ANFuck -O3
          
      - name: Run
        working-directory: "/home/runner/work/ANFuck/ANFuck/ANFuck/__dist"
        run: ./ANFuck # To verify that it actually runs.
